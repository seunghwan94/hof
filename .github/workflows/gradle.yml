name: Spring Boot CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  DOCKER_IMAGE_NAME: sounghan94/hof-0.0.1-snapshot

jobs:
  build-and-deploy-to-ec2:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission to Gradle wrapper
      run: chmod +x ./gradlew

    - name: Clean build cache
      run: ./gradlew clean

    - name: Build Spring Boot application
      run: ./gradlew build -x test # ✅ 테스트 제외하고 빌드 (필요하면 -x test 제거)

    - name: Build and push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker build -t ${{ env.DOCKER_IMAGE_NAME }} .
        docker push ${{ env.DOCKER_IMAGE_NAME }}


    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          echo "Cloning Repository on EC2..."
          if [ ! -d "hof-back" ]; then
            git clone https://github.com/seunghwan94/hof-back.git
          fi
          cd hof-back
          git pull

          echo "Setting up environment variables..."
          export SPRING_PROFILES_ACTIVE=ci
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export DB_URL=${{ secrets.DB_URL }}
          export DB_USERNAME=${{ secrets.DB_USERNAME }}
          export DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          echo "Stopping and removing old container..."
          CONTAINER_NAME="hof-container"
          if sudo docker ps -a --format "{{.Names}}" | grep -w "$CONTAINER_NAME"; then
            sudo docker stop $CONTAINER_NAME
            sudo docker rm $CONTAINER_NAME
          fi

          echo "Pulling latest Docker image..."
          sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}

          echo "Starting new container..."
          sudo docker run --name $CONTAINER_NAME -d -p 8081:8080 \
            -e TZ=Asia/Seoul \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ env.DOCKER_IMAGE_NAME }}
