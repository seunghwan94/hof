name: Spring Boot CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  DOCKER_IMAGE_NAME: sounghan94/hof-0.0.1-snapshot

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission to Gradle wrapper
      run: chmod +x ./gradlew

    - name: Set AWS environment variables and build with Gradle
      run: |
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        export AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
        export AWS_REGION=${{ secrets.AWS_REGION }}
        export DB_URL=${{ secrets.DB_URL }}
        export DB_USERNAME=${{ secrets.DB_USERNAME }}
        export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        ./gradlew build -Dspring.profiles.active=prod

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Login to Docker Hub using Access Token
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push the Docker image
      run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest


  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          CONTAINER_NAME="hof-container"
          CONTAINER_ID=$(sudo docker ps -q --filter "publish=8081-8080")

          # Check if container with the same name is running and stop/remove it
          if sudo docker ps -a --format "{{.Names}}" | grep -w "$CONTAINER_NAME"; then
            echo "Stopping and removing existing container: $CONTAINER_NAME"
            sudo docker stop $CONTAINER_NAME
            sudo docker rm $CONTAINER_NAME
          fi
          
          # Pull the latest image
          echo "Pulling the latest Docker image: ${{ env.DOCKER_IMAGE_NAME }}"
          sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}
          
          # Run the new container
          echo "Starting a new container: $CONTAINER_NAME"
          sudo docker run --name $CONTAINER_NAME -d -p 8081:8080 \
            -e TZ=Asia/Seoul \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            ${{ env.DOCKER_IMAGE_NAME }}
